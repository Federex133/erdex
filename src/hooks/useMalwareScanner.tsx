
import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

export interface ScanResult {
  is_safe: boolean;
  scan_id: string;
  threat_detected: boolean;
  scan_date: string;
  details?: {
    positives?: number;
    total?: number;
    percentage?: string;
    detected_engines?: Array<{ engine: string; result: string }>;
    scans?: string[];
    error?: string;
    message?: string;
  };
}

export const useMalwareScanner = () => {
  const [isScanning, setIsScanning] = useState(false);
  const { toast } = useToast();

  const scanFile = async (file: File): Promise<ScanResult | null> => {
    if (!file) {
      toast({
        title: "Error",
        description: "No se ha proporcionado ningún archivo para escanear",
        variant: "destructive",
      });
      return null;
    }

    setIsScanning(true);

    try {
      console.log('Iniciando escaneo de malware para:', file.name);
      
      // Convertir el archivo a base64 para enviarlo
      const fileBase64 = await new Promise<string>((resolve) => {
        const reader = new FileReader();
        reader.onload = () => {
          const result = reader.result as string;
          resolve(result.split(',')[1]); // Remover el prefijo data:
        };
        reader.readAsDataURL(file);
      });

      const { data, error } = await supabase.functions.invoke('scan-malware', {
        body: {
          fileName: file.name,
          fileData: fileBase64,
          fileSize: file.size,
          fileType: file.type
        }
      });

      if (error) {
        console.error('Error en el escaneo:', error);
        throw error;
      }

      console.log('Resultado del escaneo:', data);

      if (data.threat_detected) {
        const detectedEngines = data.details?.detected_engines?.length || data.details?.positives || 0;
        const totalEngines = data.details?.total || 0;
        const percentage = data.details?.percentage || '0';
        
        // Mostrar información detallada de la detección
        const enginesList = data.details?.detected_engines?.slice(0, 3).map(e => e.engine).join(', ') || 'múltiples antivirus';
        
        toast({
          title: "⚠️ MALWARE DETECTADO",
          description: `"${file.name}" detectado por ${detectedEngines}/${totalEngines} antivirus (${percentage}% - ${enginesList}${data.details?.detected_engines?.length > 3 ? '...' : ''}). Archivo rechazado por seguridad.`,
          variant: "destructive",
        });
      } else {
        const totalEngines = data.details?.total || 0;
        const positives = data.details?.positives || 0;
        const percentage = data.details?.percentage || '0';
        
        let statusMessage = '';
        if (totalEngines > 0) {
          if (positives > 0) {
            statusMessage = ` (${positives}/${totalEngines} antivirus reportaron detecciones menores - ${percentage}% - considerado seguro)`;
          } else {
            statusMessage = ` (verificado por ${totalEngines} antivirus - 0% detecciones)`;
          }
        }
        
        toast({
          title: "✅ Archivo seguro",
          description: `"${file.name}" ha pasado el análisis de seguridad${statusMessage}.`,
        });
      }

      return data;
    } catch (error) {
      console.error('Error durante el escaneo:', error);
      
      // En caso de error, permitir el archivo pero notificar al usuario
      toast({
        title: "⚠️ Error en el escaneo",
        description: "No se pudo verificar el archivo. El archivo será permitido, pero úsalo bajo tu responsabilidad.",
        variant: "destructive",
      });
      
      // Retornar como seguro en caso de error de comunicación
      return {
        is_safe: true,
        scan_id: `error_${Date.now()}`,
        threat_detected: false,
        scan_date: new Date().toISOString(),
        details: { error: 'Error en comunicación con servicio de escaneo' }
      };
    } finally {
      setIsScanning(false);
    }
  };

  return {
    scanFile,
    isScanning
  };
};
